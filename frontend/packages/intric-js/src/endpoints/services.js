/** @typedef {import('../types/resources').Service} Service */
/** @typedef {import('../types/resources').Group} Group */
/** @typedef {import('../client/client').IntricError} IntricError */

/**
 * @param {import('../client/client').Client} client Provide a client with which to call the endpoints
 */
export function initServices(client) {
  return {
    /**
     * List all services.
     * @returns {Promise<Service[]>}
     * @throws {IntricError}
     * */
    list: async () => {
      const res = await client.fetch("/api/v1/services/", { method: "get", params: { query: {} } });
      return res.items;
    },

    /**
     * Create a new service
     * @param {import('../types/fetch').JSONRequestBody<"post", "/api/v1/services/"> | {spaceId: string, name: string}} service
     * @throws {IntricError}
     * */
    create: async (service) => {
      if ("spaceId" in service) {
        const { spaceId: id, name } = service;
        const res = await client.fetch("/api/v1/spaces/{id}/applications/services/", {
          method: "post",
          params: {
            path: {
              id
            }
          },
          requestBody: {
            "application/json": { name }
          }
        });
        return res;
      }

      const res = await client.fetch("/api/v1/services/", {
        method: "post",
        requestBody: {
          "application/json": service
        }
      });
      return res;
    },

    /**
     * Transfer an service into a different space. Needs matching models to be available
     * Will throw error if not possible
     * @param {{service: {id: string}, targetSpace: {id: string}, moveResources?: boolean}} params
     * @throws {IntricError}
     * */
    transfer: async ({ service, targetSpace, moveResources }) => {
      const { id } = service;
      await client.fetch("/api/v1/services/{id}/transfer/", {
        method: "post",
        params: { path: { id } },
        requestBody: {
          "application/json": {
            target_space_id: targetSpace.id,
            move_resources: moveResources
          }
        }
      });
      return true;
    },

    /**
     * Get info of a service via its id.
     * @param  {{id: string} | Service} service service
     * @returns {Promise<Service>} Full info about the queried service
     * @throws {IntricError}
     * */
    get: async (service) => {
      const { id } = service;
      const res = await client.fetch("/api/v1/services/{id}/", {
        method: "get",
        params: { path: { id } }
      });
      return res;
    },

    /**
     * Update an existing service.
     * @param {Object} params
     * @param {{id: string} | Service} params.service The service you want to update
     * @param {import('../types/fetch').JSONRequestBody<"post", "/api/v1/services/{id}/">} params.update
     * @returns {Promise<Service>} The updated service
     * */
    update: async ({ service, update }) => {
      const { id } = service;
      const res = await client.fetch("/api/v1/services/{id}/", {
        method: "post",
        params: { path: { id } },
        requestBody: { "application/json": update }
      });
      return res;
    },

    /**
     * Delete the specified service.
     * @param {{id: string} | Service} service - Either provide the service to delete or a specified id.
     * @returns {Promise<Service>} The deleted service
     * */
    delete: async (service) => {
      const { id } = service;
      const res = await client.fetch("/api/v1/services/{id}/", {
        method: "delete",
        params: { path: { id } }
      });
      return res;
    },

    /**
     * Run the specified service
     * @param {Object} params
     * @param {{id: string} | Service | import('../types/resources').ServiceSparse} params.service - Either provide the service to run or a specified id.
     * @param {string} params.input â€“ The input to pass to the service
     * @returns {Promise<string | Record<string,unknown> | unknown> } The output generated by the service
     * */
    run: async ({ service, input }) => {
      const { id } = service;
      const res = await client.fetch("/api/v1/services/{id}/run/", {
        method: "post",
        params: { path: { id } },
        requestBody: { "application/json": { input } }
      });
      return res.output;
    }
  };
}
